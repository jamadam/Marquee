=encoding utf8

=head1 NAME

Marquee - もうひとつのMojoliciousベースのウェブフレームワーク 

=head1 SYNOPSIS

直接、Marqueeを使用。

    #!/usr/bin/env perl
    use strict;
    use warnings;
    
    use File::Basename 'dirname';
    use File::Spec;
    use lib join '/', File::Spec->splitdir(File::Spec->rel2abs(dirname(__FILE__))), 'lib';
    
    use Marquee;
    
    my $app = Marquee->new;
    $app->document_root($app->home->rel_dir('public_html'));
    $app->start;

継承したアプリケーション。

    package MyApp;
    use Mojo::Base 'Marquee';
    
    sub new {
        my $self = shift->SUPER::new(@_);
		
        $self->document_root($self->home->rel_dir('public_html'));
        $self->log_file($self->home->rel_dir('mojo_log/Marquee.log'));
        $self->default_file('index.html');
        $self->under_development(1);
        $self->secret('g3y3nheher');
		
        return $self;
    }
    
    package main;
    
    MyApp->new->start;

=head1 DESCRIPTION

L<Marquee>ディストリビューションは、Mojoliciousディストリビューション付属のmojoモジュール群のうえに構成された、
もうひとつのウェブアプリケーションフレームワークです。
ダイナミックなコンテンツの開発が、デザイナーワークの延長線上に配置されることを想定してデザインされています。

=head1 ATTRIBUTES

L<Marquee>はL<Mojo>から全ての属性を継承し、下記を追加で実装します。

=head2 C<document_root>

ドキュメントルートのディレクトリを指定します。このディレクトリは静的ファイルとテンプレートの両方を格納できます。

    $app->document_root($app->home->rel_dir('public_html'));

=head2 C<default_file>

デフォルトのファイル名を指定し、自動補完を有効にします。自動補完はリクエストパスがスラッシュで終わっている場合に発生します。

    $app->default_file('index.html');

=head2 C<error_document>

エラードキュメントのレンダラーインスタンスを格納します。デフォルトはL<Marquee::ErrorDocument>です。

    $app->error_document(Marquee::ErrorDocument->new);

=head2 C<hooks>

L<Marquee::Hooks>インスタンスを格納します。

    $app->hooks(Marquee::Hooks->new);

=head2 C<roots>

静的ファイルとテンプレートを格納するパスの配列を格納します。ファイルの検索は配列の先頭から順に行われます。
先頭にはL</document_root>の値がコピーされ、Marqueeコアやプラグインのバンドル用ディレクトリが後続します。

    push(@{$app->roots}, 'path/to/additional_dir')

=head2 C<secret>

暗号化クッキーなどに使用する秘密のパスフレーズを指定します。デフォルトはランダムな文字列です。
これを変更することで、暗号化クッキーを一度に期限切れにすることができます。

    my $secret = $app->secret;
    $app       = $app->secret('passw0rd');

=head2 C<ssi_handlers>

サーバーサイドインクルードのハンドラーをハッシュリファレンスで格納します。ハッシュのキーはテンプレートの最後の拡張子に対応します。

    $app->ssi_handlers->{myhandler} = Marquee::SSIHandler::MyHandler->new;

上記の例の代わりに、L</add_handler>メソッドを使用してSSIの関連付けを追加することが可能です。

=head2 C<stash>

L<Marquee::Stash>インスタンスを格納します。Marqueeアプリのstashはリクエスト毎にコンテキストオブジェクトに
ローカライズされますが、アプリ固有の値を永続的に保存でき、どこからでも透過的に参照できます。

    $app->stash(Marquee::Stash->new);
    my $stash = $app->stash;

=head2 C<types>

L<Mojolicious::Type>インスタンスを格納します。

    my $type = $app->types;
    $type->type(zip => 'application/zip');

=head2 C<under_development>

デバッグスクリーンを有効にします。デフォルトはundefです。

    $app->under_development(1);

=head2 C<x_powered_by>

X-POWERED-BYレスポンスヘッダーを設定します。

    $app->x_powered_by('MyApp');

ヘッダーは下記のように反映されます。

    Content-Type: text/html;charset=UTF-8
    X-Powered-By: MyApp
    Server: Mojolicious (Perl)

=head1 CLASS METHODS

L<Marquee>はL<Mojo>から全てのクラスメソッドを継承し、下記を追加で実装します。

=head2 C<new>

コンストラクター。

    my $app = Marquee->new;

=head2 C<asset>

バンドルされたアセットの中から、指定の名前のファイルのパスを返します。ファイル名が指定されない場合、アセットディレクトリが返されます。

    my $asset = Marquee->asset('path/to/common.css');
    
    say $asset # /path/to/lib/Marquee/Asset/path/to/common.css
    
    my $asset = Marquee->asset();
    
    say $asset # /path/to/lib/Marquee/Asset

このメソッドは各Perlモジュールに固有の名前空間にファイルをバンドルすることを可能にします。
下記の例は、任意のモジュールのバンドルファイルを取得します。

    my $asset = SomePackage->Marquee::asset('path/to/common.css');
    
    say $asset # /path/to/lib/SomePackage/Asset/path/to/common.css
    
    my $asset = SomePackage->Marquee::asset();
    
    say $asset # /path/to/lib/SomePackage/Asset

=head1 INSTANCE METHODS

L<Marquee>はL<Mojo>から全てのインスタンスメソッドを継承し、下記を追加で実装します。

=head2 C<add_handler>

L</ssi_handlers>のエントリーを追加します。第一引数はテンプレートの最後の拡張子に対応します。
第二引数はL<Marquee::SSIHandler>のサブクラスのインスタンスでなければなりません。
例としてL<Marquee::SSIHandler::EPL>を参照してください。

    $app->add_handler(myhandler => Marquee::SSIHandler::MyHandler->new);

下記のファイル名が利用可能になります。

    template.html.myhandler

=head2 C<c>

L</context>メソッドのエイリアスです。

=head2 C<context>

現在のコンテキストを返します。これは、リクエスト毎にローカライズされたL<Marquee::Context>を参照します。

    my $c = $app->context;

=head2 C<dispatch>

フロントディスパッチャーです。

    $app->dispatch()

=head2 C<handler>

mojoレイヤーから呼ばれるハンドラーです。このメソッドはリクエスト毎の処理の起点となり、レスポンスをC<$tx>にセットし、終了します。

    $app->handler($tx)

=head2 C<hook>

$app->hooks->onのエイリアスです。指定のフックポイントにコールバックを追加します。下記のフックポイントが利用できます:

=over 2

=item C<around_dispatch>

ディスパッチャをラップします。

    $app->hook(around_dispatch => sub {
        my ($next, @args) = @_;
        ### pre-process
        $next->(@args);
        ### post-process
    });

=item C<around_static>

静的ディスパッチャーをラップします。

    $app->hook(around_static => sub {
        my ($next, @args) = @_;
        ### pre-process
        $next->(@args);
        ### post-process
    });

=item C<around_dynamic>

動的ディスパッチャーをラップします。

    $app->hook(around_dynamic => sub {
        my ($next, @args) = @_;
        ### pre-process
        $next->(@args);
        ### post-process
    });

=back

=head2 C<is_directory>

指定のパスがディレクトリかどうかの真偽値を返します。ディレクトリの探索はL</roos>属性に格納されたパス群からの
相対パスを対象に行われます。

    $app->is_directory('/path/to/directory') # bool

=head2 C<log_file>

ログファイルを指定します。

    $app->log_file('/path/to/file')

=head2 C<path_to_type>

パスからMIMEタイプを検出します。

    my $type = $app->path_to_type('/path/to/file.css') # text/css

=head2 C<plugin>

クラスをプラグインとしてロードします。クラス名の先頭がC<+>でなければ接頭辞L<Marquee::Plugin>が付与されます。
C<+>はクラス名が完結していることを意味します。

    my $plugin = $app->plugin(Plugin => $params); # Marquee::Plugin::PlugName
    my $plugin = $app->plugin('+NameSpace::Plugin' => $params); # NameSpace::Plugin

=head2 C<render_ssi>

指定のパスのファイルをSSIとしてレンダリングし、結果を返します。
第二引数の指定がなければ、ファイル名からハンドラーを自動検出します。
レンダラーの拡張子は自動的に付与されないことに注意してください。

    # /path/to/template.html.epをepハンドラーでレンダリングします
    my $result = $app->render_ssi('/path/to/template.html.ep');
    
    # /path/to/template.html.epをeplハンドラーでレンダリングします
    my $result = $app->render_ssi('/path/to/template.html.ep', 'epl');
    
    # /path/to/template.htmlをepハンドラーでレンダリングします
    my $result = $app->render_ssi('/path/to/template2.html', 'ep');

=head2 C<search_static>

指定のパスの静的ファイルを検索し、存在すればパスを返します。ファイルの検索はL</roots>属性のディレクトリ群を対象に行われます。

    my $path = $app->search_static('./a.html'); # /path/to/document_root/a.html
    my $path = $app->search_static('/path/to/a.html'); # /path/to/a.html

=head2 C<search_template>

指定のパスのSSIテンプレートファイルを検索し、存在すればパスを返します。ファイルの検索はL</roots>属性のディレクトリ群を対象に行われます。

    my $path = $app->search_template('./tmpl.html'); # /path/to/document_root/tmpl.html.ep
    my $path = $app->search_template('/path/to/tmpl.html'); # /path/to/tmpl.html.ep

=head2 C<serve_redirect>

指定のURIへリダイレクトするレスポンスを出力します。

    $app->serve_redirect('http://example.com/');
    $app->serve_redirect('/path/');

=head2 C<serve_static>

指定のパスのファイルを出力します。

    $app->serve_static('/path/to/static.png');

=head2 C<serve_dynamic>

指定のパスの動的SSIページを出力します。

    $app->serve_dynamic('/path/to/template.html.ep');

=head2 C<start>

アプリをスタートします。

    $app->start();

=head2 C<to_abs>

指定のパスの絶対URIを、リクエストURIに配慮して生成します。

https://example.com:3001/a/index.htmlへのリクエストに対して、
下記の例はhttps://example.com:3001/path/to/file.htmlを生成します。
    
    say $self->to_abs('/path/to/file.html');

=head1 SEE ALSO

L<Mojolicious>

=head1 AUTHOR

Sugama Keita, E<lt>sugama@jamadam.comE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2012 by Sugama Keita.

This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

=cut
