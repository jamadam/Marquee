=encoding utf8

=head1 NAME

Marquee::Context - Context

=head1 SYNOPSIS

    my $c = Marquee::Context->new(app => $app, tx => $tx);
    my $app             = $c->app;
    my $req             = $c->req;
    my $res             = $c->res;
    my $tx              = $c->tx;
    my $session         = $c->session;
    my $cookie          = $c->cookie('key');
    my $signed_cookie   = $c->signed_cookie('key');
    my $stash           = $c->stash;

=head1 DESCRIPTION

L<Marquee::Context>クラスは、リクエスト毎のコンテキストを表象します。本クラスはセッション管理と暗号化クッキーの管理も行います。

=head1 ATTRIBUTES

L<Marquee::Context>は下記の属性を実装します。

=head2 C<app>

L<Marquee>アプリケーションのインスタンスです。

    my $app = $c->app;

=head2 C<req>

C<$self-E<gt>tx-E<gt>req>へのエイリアスです。

    my $req = $c->req;
    $c->req($req);

=head2 C<res>

C<$self-E<gt>tx-E<gt>res>へのエイリアスです。

    my $res = $c->req;
    $c->req($res);

=head2 C<session>

持続的なデータストレージ。 暗号化クッキーの中に、JSON形式でシリアライズされ保存されます。 クッキーは一般的に4096バイトのデータに制限されることに注意してください。

    my $session = $c->session;
    my $foo     = $session->{'foo'};
    $session->{foo} = 'bar';

=head2 C<session_path>

セッションに使用されるパスを指定します。デフォルトはC</>です。

    $c->session_path('/some/path/')
    my $path = $c->session_path

=head2 C<session_secure>

全てのセッションクッキーにセキュアフラグをセットすることで、ブラウザへの送信をHTTPSコネクションに限定します。

    my $secure = $c->session_secure;
    $c->session_secure(1);

=head2 C<session_expiration>

セッションの有効期限を現在からの秒数で指定します。デフォルトは3600です。有効期限はリクエスト毎にリフレッシュ
されます。

    my $time = $c->session_expiration;
    $c->session_expiration(3600);

=head2 C<session_name>

セッションデータを格納するための暗号化クッキーの名前を指定します。デフォルトは「mrge」です。

    my $name = $c->session_name;
    $c->session_name('session');

=head2 C<stash>

appから継承されたスタッシュを格納します。

    my $stash = $c->stash;

=head2 C<tx>

L<Mojo::Transaction>インスタンス。

    my $tx = $c->tx;

=head1 CLASS METHODS

L<Marquee::Context>は下記のクラスメソッドを実装します。

=head2 C<new>

コンストラクタ。

    my $c = Marquee::Context->new;

=head1 INSTANCE METHODS

L<Marquee::Context>は下記のインスタンスメソッドを実装します。

=head2 C<close>

コンテキストをクローズします。

    $c->close;

=head2 C<cookie>

    my $value  = $c->cookie('foo');
    my @values = $c->cookie('foo');
    $c         = $c->cookie(foo => 'bar');
    $c         = $c->cookie(foo => 'bar', {path => '/'});

リクエストのクッキーにアクセスしたり、新しいレスポンス用クッキーを生成したりします。

    # Create response cookie with domain
    $c->cookie(name => 'sebastian', {domain => 'mojolicio.us'});

=head2 C<served>

レスポンスのステータスコードがすでに設定済みか調べ、真偽値を返します。

    if (! $c->served) {
        ...
    }

=head2 C<signed_cookie>

暗号化クッキーにアクセスしたり、新しい暗号化クッキーを生成したりします。署名の検証に失敗したクッキーは自動的に破棄されます。

    my $value  = $c->signed_cookie('foo');
    my @values = $c->signed_cookie('foo');
    $c         = $c->signed_cookie(foo => 'bar');
    $c         = $c->signed_cookie(foo => 'bar', {path => '/'});

=head1 SEE ALSO

L<Marquee>, L<Mojolicious>

=cut
