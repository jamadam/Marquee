=encoding utf8

=head1 NAME

Cookbook - Marqueeクックブック

=head1 OVERVIEW

このドキュメントには、Marqueeアプリケーション開発のいくつかのレシピで構成されます。

=head1 INSTALLATION

    $ wget https://github.com/jamadam/Marquee/tarball/master -O marquee.tar.gz
    $ cpanm marquee.tar.gz
    $ rm marquee.tar.gz

=head1 GETTING STARTED

最小のMarqueeアプリです。

    use Marquee;
    
    my $app = Marquee->new;
    
    $app->start;

アプリは下記のような独自のクラスと上記の起動スクリプトに分離することもできます。

    package MyApp;
    use Mojo::Base 'Marquee';
    
    sub new {
        my $self = shift->SUPER::new(@_);
        ...
        return $self;
    }

The following shows how practical application look like.

    sub new {
        my $self = shift->SUPER::new(@_);
        
        $self->document_root($self->home->rel_dir('htdocs'));
        $self->log_file($self->home->rel_dir('mojo_log/Marquee.log'));
        $self->default_file('index.html');
        $self->under_development(1);
        $self->secret('g4ioaseut84937');
    }

このアプリはMojoのやり方で起動できます。

    $ ./myapp daemon
    Server available at http://127.0.0.1:3000.

プロダクションでは..
    
    $ hypnotoad ./myapp

=head1 CONTEXT OBJECT

Marqueeアプリの開発では、トランザクションオブジェクトをメソッド間でたらい回しにせず、
Marqueeクラスメソッドにて取得することを推奨しています。いつでも、アプリ内のどこからでも
トランザクションを内包した現在のコンテキストを取得することができます。
詳しくはL<Marquee/context>とL<Marquee::Context>を参照してください。

    my $context = Marquee->c; # Marquee::Context
    my $app = $context->app;  # Marquee application
    my $tx  = $context->tx;   # Mojo::Transaction

=head1 スタッシュ

スタッシュは広域にデータをシェアするためのハッシュです。Marqueeは2つのレベルのスタッシュスコープを定義しています。
アプリケーションレベルのスタッシュはアプリ内のどこからでも参照できます。他方、リクエストレベルの
スタッシュはアプリレベルスタッシュのローカルコピーで、トランザクションの終わりまで有効です。
どちらもアプリに属し、C<$app-E<gt>stash>という同じインターフェースでアクセス可能です。

より詳しくはL<Marqee/Stash>とL<Marquee::Stash>を参照してください。

    $app = Marquee->new;
    $app->stash(mydata => 'app data'); # set data

テンプレート内にて。。

    <% my $stash = Marquee->stash(); # local copy for a request %>

アプリレベルのデータは透過的に利用可能です。

    <% my $mydata = $stash->get('mydata'); %> <!-- app data -->
    <% $stash->set(context_data => time); %>

setされたデータはトランザクションのクローズとともに消滅します。

=head1 テンプレート開発

MarqueeにバンドルされたテンプレートハンドラーであるL<Marquee::SSIHandler::EP>は
L<Mojolicious::Plugin::EPRenderer>にそっくりですが、ヘルパー関数において違いがあります。
詳しくはL<Marquee::SSIHandler::EP/FUNCTIONS>を参照してください。

基本的な構文。

    <% ...; %> <!-- execute Perl code -->
    <%= ... %> <!-- execute Perl code and output(with html escape) -->
    <%== ... %> <!-- execute Perl code and output(without html escape) -->
    % ...; # execute inline Perl code
    %= ...; # execute inline Perl code code and output(with html escape)
    %== ...; # execute inline Perl code code and output(without html escape)
    
ブロック構文。

    <% my $block = begin %>
        <% my $arg = shift; %>
        <%= $arg %> is given
    <% end %>
    
    <%= $block->('foo') %>

テンプレートのコンパイル結果のキャッシュ方法についても違いがあります。
L<Marquee::SSIHandler::EP>のキャッシュはファイルのutimeの変化により自動的に期限切れとなります。
このため、テンプレートの編集を反映するためにアプリを再起動する必要はありません。

=head2 カスタムファンクションの追加

You can easily add functions to ep handler. Following example adds a function
that retrieves all text data out of given HTML.

    $app = Marquee->new;
    $app->ssi_handlers->{ep}->add_function(html_to_text => sub {
        my ($ep, $html) = @_;
        return Mojo::DOM->new($html)->all_text;
    });

=head1 モデル

Marquee doesn't provide any data model layer so you should adopt some Perl
modules you like.

To make your model accessible in Marquee app, we recommend registering it to
applicatin level stash so that the object can be accessible from anywhare in
your app even in tempaltes.

    use MyApp::NewsRelease;
    
    my $app = Marquee->new;
    $app->stash->set(news_release => MyApp::NewsRelease->new);

Inside templates..

    <% my @news = $news_release->top(5); %>

=head1 ルーティング

デフォルトのマッピングルールのコンセプトを尊重する限り、Marqueeにとってルーティングは重要な問題ではありませんが、
L<Marquee::Plugin::Router>プラグインを使用すれば、このルーティングをオーバーライドすることができます。

    $app->plugin(Router => sub {
        my $r = shift;
        $r->route(qr{/api/member.json})->via('get')->to(sub {
            my $res = Marquee->c->res;
            my $member = {1 => 'sato', 2 => 'saito', 3 => 'suzuki'};
            $res->body(Mojo::JSON->new->encode($member));
            $res->code(200);
            $res->headers->content_type('application/json');
        });
    });

もうひとつ、プレースホルダーがどのように動くかを示した例です。

    $app->plugin(Router => sub {
        my $r = shift;
        $r->route(qr{^/(.+\.md)?$})->to(sub {
            my $filename = shift;
            $md->serve_markdown($app->search_static($filename || 'readme.md'))
        });
        $r->route(qr{^/perldoc/(.+)})->to(sub {
            my $module = shift;
            $pod->serve_pod_by_name($module);
        });
    });

=head1 テスト

MarqueeアプリケーションはMojoアプリケーションと同様にテストできます。

L<http://mojolicio.us/perldoc/Mojolicious/Guides/Growing#Testing>も参照ください。

=head1 ベーシック認証

ベーシック認証専用のL<Marquee::Plugin::Auth>プラグインがあります。
下記のようなApacheのhtaccessを移植することができます。

    my $htpasswd = {
        user1 => 'znq.opIaiH.zs',
        user2 => 'dF45lPM2wMCDA',
    };
    
    $self->plugin(Auth => [
        qr{^/admin/} => 'Secret Area' => sub {
            my ($username, $password) = @_;
            if (my $expect = $htpasswd->{$username}) {
                return crypt($password, $expect) eq $expect;
            }
        },
    ]);

=head1 デプロイメント

=head2 ビルトインwebサーバー

    #!/usr/bin/env perl
    use strict;
    use warnings;
    
    use File::Basename 'dirname';
    use File::Spec;
    use lib join '/', File::Spec->splitdir(File::Spec->rel2abs(dirname(__FILE__))), '../lib';
    use MyApp;
    
    MyApp->new->start;

コマンドラインにて。。

    $ ./myapp.pl daemon

=head2 Hypnotoad

    #!/usr/bin/env perl
    use strict;
    use warnings;
    
    use File::Basename 'dirname';
    use File::Spec;
    use lib join '/', File::Spec->splitdir(File::Spec->rel2abs(dirname(__FILE__))), '../lib';
    use MyApp;
    
    my $app = MyApp->new;
    $app->config(hypnotoad => {listen => ['http://*:8002']});
    $app->start;

コマンドラインにて。

    $ hypnotoad ./myapp.pl

=head2 Apache/CGI

CGI環境での起動スクリプトは下記のようになります。

    #!/usr/bin/env perl
    use strict;
    use warnings;
    
    use File::Basename 'dirname';
    use File::Spec;
    use lib join '/', File::Spec->splitdir(File::Spec->rel2abs(dirname(__FILE__))), '../lib';
    use MyApp;
    
    MyApp->new->start;

htaccessは下記のようになります。

    RewriteEngine On
    RewriteCond %{REQUEST_FILENAME}.ep -f [OR]
    RewriteCond %{REQUEST_FILENAME}/index.html.ep -f [OR]
    RewriteCond %{REQUEST_URI} ^/static
    RewriteRule ^(.*)$ index.cgi/$1 [QSA]
    RewriteRule ^ - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization},L]

=head1 コマンドラインインターフェース

L<Marquee>はPerlのオブジェクト指向APIに加え、カレントディレクトリの内容をL<Mojo::Daemon>を使って
ウェブページとして発行するコマンドラインインターフェースも提供します。
これは、開発環境用や、些細なファイル共有などにも便利です。
APIには、オートインデックス、PODビューワー、Markdownビューワーなどの便利なオプションが備わっています。
もうApacheなどは必要ありません。

=head2 Synopsis

    mojo marquee [OPTIONS]

下記のコマンドが利用できます:
  
    -dr, --document_root <path>  ドキュメントルートのパスをしています。デフォルトはカレントです。
    -df, --default_file <name>   デフォルトのファイル名を指定し、自動補完を有効にします。
    -ai, --auto_index            オートインデックスを有効にします。デフォルトは0です。
    -dv, --doc_viewer            ドキュメントビューワーを有効にします。
    -ud, --under_development     サーバーサイドインクルードのためのデバッグスクリーンを有効にします。
    -b, --backlog <size>         Set listen backlog size, defaults to
                                 SOMAXCONN.
    -c, --clients <number>       Set maximum number of concurrent clients,
                                 defaults to 1000.
    -g, --group <name>           Set group name for process.
    -i, --inactivity <seconds>   Set inactivity timeout, defaults to the value
                                 of MOJO_INACTIVITY_TIMEOUT or 15.
    -l, --listen <location>      Set one or more locations you want to listen
                                 on, defaults to the value of MOJO_LISTEN or
                                 "http://*:3000".
    -p, --proxy                  Activate reverse proxy support, defaults to
                                 the value of MOJO_REVERSE_PROXY.
    -r, --requests <number>      Set maximum number of requests per keep-alive
                                 connection, defaults to 25.
    -u, --user <name>            Set username for process.

=head2 使用例1

    $ mojo marquee
    [Mon Oct 17 23:18:35 2011] [info] Server listening (http://*:3000)
    Server available at http://127.0.0.1:3000.

=head2 使用例2 (ポート番号を指定)

    $ mojo marquee --listen http://*:3001

=head2 使用例3 (ドキュメントルートを指定)

    $ mojo marquee --document_root ./public

=head2 使用例4 (デフォルトファイル名を指定)

    $ mojo marquee --default_file index.html

=head2 使用例5 (オートインデックスとツリー表示を有効化)

    $ mojo marquee --auto_index

=cut
