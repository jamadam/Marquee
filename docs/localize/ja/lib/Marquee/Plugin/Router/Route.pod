=encoding utf8

=head1 NAME

Marquee::Plugin::Router::Route - ルーターの生成と格納

=head1 SYNOPSIS
    
    my $r = Marquee::Plugin::Router::Route->new;
    $r->route(qr{^/index\.html})->to(sub() {
        ...
    });
    
    $r->route(qr{^/special\.html})->to(sub() {
        ...
    });
    
    $r->route(qr{^/capture/(.+)-(.+)\.html})->to(sub($a, $b) {
        my ($a, $b) = @_;
        ...
    });
    
    $r->route(qr{^/rare/})->via('GET', 'POST')->to(sub() {
        ...
    });
    
    $r->route(qr{^/default})->to(sub() {
        ...
    });
    
    my $bridge = $r->bridge(sub($c) {
        return 1; # or 0
    });
    
    $bridge->route(qr{})->to(sub() {...});

=head1 DESCRIPTION

L<Marquee::Plugin::Router>は、ルートを生成し格納します。

=head1 ATTRIBUTES

L<Marquee::Plugin::Router::Route>は下記の属性を実装します。

=head2 C<elems>

ルートのエントリーです。

    my $elems = $r->elems;

=head1 INSTANCE METHODS

L<Marquee::Plugin::Router::Route>は下記のインスタンスメソッドを実装します。

=head2 C<bridge>

    my $bridge = $r->bridge(sub($c) {
        my $c = shift;
        return $bool;
    });

=head2 C<route>

リクエストURIにマッチングされる正規表現を指定します。

    $r->route(qr{^/index\.html});

=head2 C<to>

ルートがマッチしたときに実行されるコールバックを指定します。

    $r->to(sub() {...});
    $r->to(sub($capture1, $capture2) {...});

=head2 C<via>

HTTPメソッドでルートをフィルターします。

    $r->via('GET', 'POST');

=head2 C<add_cond>

ルートエントリーにマッチ条件を追加します。

    $r->add_cond(sub($c) {
        return 1; # or 0
    });

=head1 SEE ALSO

L<Marquee::Plugin::Router>, L<Marquee>, L<Mojolicious>

=cut
