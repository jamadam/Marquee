=encoding utf8

=head1 NAME

Marquee::SSIHandler::EP - EPテンプレートハンドラー

=head1 SYNOPSIS

    my $ep = Marquee::SSIHandler::EP->new;
    $ep->render('/path/to/template.html.ep');

=head1 DESCRIPTION

L<Marquee::SSIHandler::EP>は、EPテンプレートハンドラーです。

=head1 ATTRIBUTES

L<Marquee::SSIHandler::EP>は
L<Marquee::SSIHandler::EPL>から全ての属性を継承し、下記を追加で実装します。

=head2 C<funcs>

テンプレート関数をハッシュリファレンスに格納します。

    $ep->funcs->{some_func} = sub {...};

上記の例の代わりに、L</add_function>メソッドで関数を追加することも可能です。

=head1 FUNCTIONS

下記のテンプレート関数が自動的に利用可能です。

=head2 C<current_template>

現在のテンプレートパスを返します。

    <% my $path = current_template(); %>

=head2 C<extends>

L</extends>関数はL</placeholder>とL</override>と共に、テンプレート継承の仕組みを提供します。

C<layout/common.html.ep>という名前のベーステンプレート。

    <!doctype html>
    <html>
        <head>
            <title><%= placeholder 'title' => begin %>DEFAULT TITLE<% end %></title>
        </head>
        <body>
            <div id="main">
                <%= placeholder 'main' => begin %>
                    DEFAULT MAIN
                <% end %>
            </div>
            <div id="main2">
                <%= placeholder 'main2' => begin %>
                    DEFAULT MAIN2
                <% end %>
            </div>
        </body>
    </html>

下記のようにC<common.html>を拡張できます。
パスは、カレントテンプレートからの相対パスを指定するか、スラッシュを接頭することでドキュメントルートからのパスを指定します。
ハンドラーは自動的に検出されますので、拡張子は必要ありません。

    <%= extends './layout/common.html' => begin %>
        <% override 'title' => begin %>title<% end %>
        <% override 'main' => begin %>
            <div>
                main content<%= time %>
            </div>
        <% end %>
    <% end %>

=head2 C<extends_as>

L</extends_as>はテンプレートを継承し、拡張します。
この関数はL</extends>と似ていますが、テンプレートをパースするハンドラーを指定することができます。

C<template.html>はC<tempalte.html.ep>としない点に注意してください。

    <%= extends_as './path/to/template.html', 'ep' => begin %>
    ...
    <% end %>

=head2 C<iter>

ブロックを使用して配列を反復処理します。

    <%= iter @array => begin %>
        <% my ($elem, $index) = @_; %>
        No.<%= $index %> is <%= $elem %>
    <% end %>

配列リファレンスとハッシュリファレンスに対しても使用可能です。

    <%= iter $array_ref => begin %>
        <% my ($elem, $index) = @_; %>
        No.<%= $index %> is <%= $elem %>
    <% end %>

    <%= iter $hash_ref => begin %>
        <% my ($key, $value) = @_; %>
        <%= $key %> is <%= $value %>
    <% end %>

=head2 C<include>

現在のテンプレートに任意のテンプレートか静的ファイルを挿入できます。パスは、カレントテンプレートからの相対パスを指定するか、
スラッシュを接頭することでドキュメントルートからのパスを指定します。

    <%= include('./path/to/template.html', key => value) %>
    <%= include('/path/to/template.html', key => value) %>

=head2 C<include_as>

現在のテンプレートに任意のテンプレートを挿入します。include関数に似ていますが、テンプレートパースに使用するハンドラーを指定することができます。

    <%= include_as('./path/to/template.html', 'ep', key => value) %>

=head2 C<override>

プレースホルダーをオーバーライドします。L</extends>メソッドを参照してください。

=head2 C<param>

指定のキーのリクエストパラメータを返します。

    <%= param('key') %>

=head2 C<placeholder>

デフォルトブロックを伴う、プレースホルダーを設定します。L</extends>メソッドを参照してください。

=head2 C<stash>

指定のキーのスタッシュ値を返します。

    <%= stash('key') %>

=head2 C<to_abs>

指定の相対パスから、ファイルシステム上の絶対パスを生成します。前置のドットセグメントは現在のテンプレートを示し、
前置のスラッシュはMarqueeルートを示します。

    <%= to_abs('/path.css') %> <!-- /path/to/Marquee/path.css -->

C</path/to/Marquee/html/category/index.html>にて

    <%= to_abs('./path.css') %> <!-- /path/to/Marquee/html/category/path.css  -->

=head2 C<url_for>

ドキュメントルートからのポータブルなURLを生成します。

    <%= url_for('./path.css') %>

=head1 CLASS METHODS

L<Marquee::SSIHandler::EP>は
L<Marquee::SSIHandler::EPL>から全てのクラスメソッドを継承し、下記を追加で実装します。

=head2 C<new>

コンストラクタ。

    my $ep = Marquee::SSIHandler::EP->new;

=head1 INSTANCE METHODS

L<Marquee::SSIHandler::EP>は
L<Marquee::SSIHandler::EPL>から全てのインスタンスメソッドを継承し、下記を追加で実装します。

=head2 C<add_function>

レンダラーに関数を追加します。

    $ep->add_function(html_to_text => sub {
        my ($ep, $html) = @_;
        return Mojo::DOM->new($html)->all_text;
    });

テンプレート内で。。

    <%= html_to_text($html) %>

=head2 C<render>

指定のテンプレートをレンダリングし、結果を返します。レンダリングに失敗した場合、L<Mojo::Exception>を伴って
dieします。

    $ep->render('/path/to/template.html.ep');

=head2 C<url_for>

ドキュメントルートからのポータブルなURLを生成します。

    <%= url_for('./b.css') %> # current is '/a/.html' then generates '/a/b.css'
    <%= url_for('/b.css') %>  # current is '/a/.html' then generates '/b.css'

=head1 SEE ALSO

L<Marquee::SSIHandler>, L<Marquee>, L<Mojolicious>

=cut
