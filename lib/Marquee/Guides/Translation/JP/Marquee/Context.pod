=encoding utf8

=head1 NAME

Marquee::Context - Context

=head1 SYNOPSIS

    my $context = Marquee::Context->new(app => $app, tx => $tx);
    my $app             = $context->app;
    my $req             = $context->req;
    my $res             = $context->res;
    my $tx              = $context->tx;
    my $session         = $context->session;
    my $cookie          = $context->cookie('key');
    my $signed_cookie   = $context->signed_cookie('key');
    my $stash           = $context->stash;

=head1 DESCRIPTION

L<Marquee::Context>クラスは、リクエスト毎のコンテキストを表象します。本クラスはセッション管理と署名付きクッキーの管理も行います。

=head1 ATTRIBUTES

=head2 app

L<Marquee> instance.

    my $app = $context->app;

=head2 req

C<$context-E<gt>tx-E<gt>req>へのエイリアスです。

    my $req = $context->tx->req;
    $context->tx->req($req);

=head2 res

C<$self-E<gt>tx-E<gt>res>へのエイリアスです。

    my $res = $context->tx->req;
    $context->tx->req($res);

=head2 session

持続的なデータストレージ。 暗号化クッキーの中に、JSON形式でシリアライズされ保存されます。 クッキーは一般的に4096バイトのデータに制限されることに注意してください。

    my $session = $context->session;
    my $foo     = $session->{'foo'};
    $session->{foo} = 'bar';

=head2 session_path

A path for session. Defaluts to /.

=head2 session_secure

全てのセッションクッキーにセキュアフラグをセットすることで、ブラウザへの送信をHTTPSコネクションに限定します。

    my $secure = $context->session_secure;
    $context->session_secure(1);

=head2 session_expiration

セッションの有効期限を現在からの秒数で指定します。デフォルトは3600です。有効期限はリクエスト毎にリフレッシュ
されます。

    my $time = $context->session_expiration;
    $context->session_expiration(3600);

=head2 session_name

セッションデータを格納するための署名付きクッキーの名前を指定します。デフォルトは「mrge」です。

    my $name = $context->session_name;
    $context->session_name('session');

=head2 stash

appから継承されたスタッシュを格納します。

    my $stash = $context->stash;

=head2 tx

L<Mojo::Transaction>インスタンス。

    my $tx = $context->tx;

=head1 METHODS

=head2 new

コンストラクタ。

    my $context = Marquee::Context->new;

=head2 $instance->close

コンテキストをクローズします。

=head2 $instance->cookie

    my $value  = $c->cookie('foo');
    my @values = $c->cookie('foo');
    $c         = $c->cookie(foo => 'bar');
    $c         = $c->cookie(foo => 'bar', {path => '/'});

リクエストのクッキーにアクセスしたり、新しいレスポンス用クッキーを生成したりします。

    # Create response cookie with domain
    $c->cookie(name => 'sebastian', {domain => 'mojolicio.us'});

=head2 $instance->served

レスポンスのステータスコードがすでに設定済みか調べ、真偽値を返します。

    if (! $c->served) {
        ...
    }

=head2 $instance->signed_cookie

署名付きクッキーにアクセスしたり、新しい署名付きクッキーを生成したりします。署名の検証に失敗したクッキーは自動的に破棄されます。

    my $value  = $c->signed_cookie('foo');
    my @values = $c->signed_cookie('foo');
    $c         = $c->signed_cookie(foo => 'bar');
    $c         = $c->signed_cookie(foo => 'bar', {path => '/'});

=head1 SEE ALSO

L<Marquee>, L<Mojolicious>

=cut
