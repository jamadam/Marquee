=head1 NAME

Marquee::SSIHandler::EP - EPテンプレートハンドラー

=head1 SYNOPSIS

    my $ep = Marquee::SSIHandler::EP->new;
    $ep->render('/path/to/template.html.ep');

=head1 DESCRIPTION

EPテンプレートハンドラー. EPはEPLを継承します。

=head1 ATTRIBUTES

L<Marquee::SSIHandler::EP>は
L<Marquee::SSIHandler::EPL>から全ての属性を継承し、下記を追加で実装します。

=head2 funcs

テンプレート関数をハッシュリファレンスに格納します。

    $ep->funcs->{some_func} = sub {...};

上記の例の代わりに、C<add_function>メソッドで関数を追加することも可能です。

=head1 FUNCTIONS

=head2 current_template()

現在のテンプレートパスを返します。

    <% my $path = current_template(); %>

=head2 extends($path, $block)

ベーステンプレート

    <!doctype html>
    <html>
        <head>
            <title><%= placeholder 'title' => begin %>DEFAULT TITLE<% end %></title>
        </head>
        <body>
            <div id="main">
                <%= placeholder 'main' => begin %>
                    DEFAULT MAIN
                <% end %>
            </div>
            <div id="main2">
                <%= placeholder 'main2' => begin %>
                    DEFAULT MAIN2
                <% end %>
            </div>
        </body>
    </html>

拡張テンプレート。

    <%= extends './layout/common.html' => begin %>
        <% override 'title' => begin %>
            title
        <% end %>
        <% override 'main' => begin %>
            <div>
                main content<%= time %>
            </div>
        <% end %>
    <% end %>

=head2 iter @array => $block

ブロックを使用して配列を反復処理します。

    <%= iter @array => begin %>
        <% my ($elem, $index) = @_; %>
        No.<%= $index %> is <%= $elem %>
    <% end %>

配列リファレンスとハッシュリファレンスに対しても使用可能です。

    <%= iter $array_ref => begin %>
        <% my ($elem, $index) = @_; %>
        No.<%= $index %> is <%= $elem %>
    <% end %>

    <%= iter $hash_ref => begin %>
        <% my ($key, $value) = @_; %>
        <%= $key %> is <%= $value %>
    <% end %>

=head2 include('./path/to/template.html', key => value)

現在のテンプレートに任意のテンプレートか静的ファイルを挿入できます。パスは、カレントテンプレートからの相対パスを指定するか、
スラッシュを接頭することでドキュメントルートからのパスを指定します。

    <%= include('./path/to/template.html', key => value) %>

=head2 include_as('./path/to/template.html', $handler_ext, key => value)

[EXPERIMENTAL]
現在のテンプレートに任意のテンプレートを挿入します。include関数に似ていますが、テンプレートパースに使用するハンドラーを指定することができます。

    <%= include_as('./path/to/template.html', 'ep', key => value) %>

=head2 override($name, $block)

プレースホルダーをオーバーライドします。C<extends>メソッドを参照してください。

=head2 param('key')

指定のキーのリクエストパラメータを返します。

    <% param('key') %>

=head2 placeholder($name, $default_block)

デフォルトブロックを伴う、プレースホルダーを設定します。C<extends>メソッドを参照してください。

=head2 stash('key')

指定のキーのスタッシュ値を返します。

    <% stash('key') %>

=head2 to_abs()

指定の相対パスから絶対パスを生成します。

    <% to_abs('./path.css') %>

=head2 url_for('path/to/file')

ポータブルURLを生成します。

    <% url_for('./path.css') %>

=head1 METHODS

L<Marquee::SSIHandler::EP>は
L<Marquee::SSIHandler::EPL>から全てのメソッドを継承し、下記のメソッドを追加で実装します。

=head2 $instance->new

コンストラクタ。

    my $ep = Marquee::SSIHandler::EP->new;

=head2 $instance->add_function(name => sub {...})

    $ep->add_function(html_to_text => sub {
        my ($ep, $html) = @_;
        return Mojo::DOM->new($html)->all_text;
    });

テンプレート内で。。

    <%= html_to_text($html) %>

=head2 $instance->render($path)

指定のテンプレートをレンダリングし、結果を返します。レンダリングに失敗した場合、L<Mojo::Exception>を伴って
dieします。

    $ep->render('/path/to/template.html.ep');

=head1 SEE ALSO

L<Marquee::SSIHandler>, L<Marquee>, L<Mojolicious>

=cut
