=head1 NAME

Marquee::SSIHandler::EP - EP template handler

=head1 SYNOPSIS

    my $ep = Marquee::SSIHandler::EP->new;
    $ep->render('/path/to/template.html.ep');

=head1 DESCRIPTION

EP handler. EP is a EPL.

=head1 ATTRIBUTES

L<Marquee::SSIHandler::EP> inherits all attributes from
L<Marquee::SSIHandler::EPL> and implements the following new ones.

=head2 funcs

A Hash ref that contains template functions.

    $ep->funcs->{some_func} = sub {...};

You can use C<add_function> method to add a function entry instead of the code
above.

=head1 FUNCTIONS

=head2 current_template()

Returns current template path.

    <% my $path = current_template(); %>

=head2 extends($path, $block)

Base template.

    <!doctype html>
    <html>
        <head>
            <title><%= placeholder 'title' => begin %>DEFAULT TITLE<% end %></title>
        </head>
        <body>
            <div id="main">
                <%= placeholder 'main' => begin %>
                    DEFAULT MAIN
                <% end %>
            </div>
            <div id="main2">
                <%= placeholder 'main2' => begin %>
                    DEFAULT MAIN2
                <% end %>
            </div>
        </body>
    </html>

Extended template.

    <%= extends './layout/common.html' => begin %>
        <% override 'title' => begin %>
            title
        <% end %>
        <% override 'main' => begin %>
            <div>
                main content<%= time %>
            </div>
        <% end %>
    <% end %>

Extends template.

=head2 iter @array => $block

Array iterator with block.

    <%= iter @array => begin %>
        <% my ($elem, $index) = @_; %>
        No.<%= $index %> is <%= $elem %>
    <% end %>

Array refs and Hash refs are also accepted.

    <%= iter $array_ref => begin %>
        <% my ($elem, $index) = @_; %>
        No.<%= $index %> is <%= $elem %>
    <% end %>

    <%= iter $hash_ref => begin %>
        <% my ($key, $value) = @_; %>
        <%= $key %> is <%= $value %>
    <% end %>

=head2 include('./path/to/template.html', key => value)

Include a template or a static files into current template. The path can be
relative to current template directory or relative to document root if leading
slashed. 

    <%= include('./path/to/template.html', key => value) %>

=head2 include_as('./path/to/template.html', $handler_ext, key => value)

[EXPERIMENTAL] Include a template into current template. This function is
similar to include but you can specify the handler the template would be parsed
with.

    <%= include_as('./path/to/template.html', 'ep', key => value) %>

=head2 override($name, $block)

Override placeholder. See C<extends> method.

=head2 param('key')

Returns request parameters for given key.

    <% param('key') %>

=head2 placeholder($name, $default_block)

Set placeholder with default block. See C<extends> method.

=head2 stash('key')

Returns stash value for given key.

    <% stash('key') %>

=head2 to_abs()

Generate absolute path with given relative one

    <% to_abs('./path.css') %>

=head2 url_for('path/to/file')

Generate a portable URL.

    <% url_for('./path.css') %>

=head1 METHODS

L<Marquee::SSIHandler::EP> inherits all methods from
L<Marquee::SSIHandler::EPL> and implements the following new ones.

=head2 $instance->new

Constructor.

    my $ep = Marquee::SSIHandler::EP->new;

=head2 $instance->add_function(name => sub {...})

    $ep->add_function(html_to_text => sub {
        my ($ep, $html) = @_;
        return Mojo::DOM->new($html)->all_text;
    });

in templates...

    <%= html_to_text($html) %>

=head2 $instance->render($path)

Renders given template and returns the result. If rendering fails, die with
Mojo::Exception.

    $ep->render('/path/to/template.html.ep');

=head1 SEE ALSO

L<Marquee::SSIHandler>, L<Marquee>, L<Mojolicious>

=cut
